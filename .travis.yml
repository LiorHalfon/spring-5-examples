service:
- docker
sudo: required
group: travis_lts
env:
  global:
    TERM=dumb
  secure: "Ky1t6lTuBJ5SEc1i7N7mgaN7D4PLjqWTnuHgEFE0w/l5mnEcCQe2CVkggy5fSV+kSTcwaNh0lF1bSm+lrD/TcTK/D5R6DQmUvmMD2BcixDyub45lg0g+oFiBmbiNYhjBfwQUfy6XGbp6fJubdqfMk/LhBgb1rdKiAn98ringCG78IUMD18Y5Mxx3YiUJCSW2llG9VgatInD690d7iDw1BMFVkgnJsp+1psphDyIbAvdAwtz5CINWGQNlHlQDwkEniEM7k+qfz+H+AFtem7WRiLtj9ODMS9kbdx/FRQSRlVp+cdXPpX0uxGpztoWxNsIEDvjXMUqFzsAQNQa1zycm1UJcZeH7iSvNCVKLi1yEd3LE/gVe5VtUlHpBLvtRrlaTU+7fEexGn0gi9pk5I19s6EFStsSkb0qZZYNnv2/oKs6RYQUiJ2LlYWBRGcvt5olPnfIZfOqcjX2Hty60kU60WgSY/xYSjC8XAPg30yRJJLUJfWXMrpSCrFTB9LbV8y5ttIPSuc4ChzdD28bLJnssQh8ixPNuOnlToPDcjLZ+X+83/fGXm8I/EGWFlu3Etm4TGDba0GqUTzz7hovXwDL5u29MkLHy4KqBlaE2c6vqr4DSqoHv+GyGJPDZs0JARRHcyXuT+7DaR1/22CZdclye5jZSm8vO7Rv3gOmK1r9uzmA="
language: java
jdk:
- openjdk8
- oraclejdk8
install: true
before_install:
#- curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
#- sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
#- sudo apt install -y docker-ce
#- sudo usermod -aG docker $(whoami)
#- curl -fsSL get.docker.com | sudo sh -
#- wget get.docker.com -O- | sudo sh -

- sudo apt update -y || true
- sudo apt install -y --no-install-recommends docker-ce curl jq libxml2-utils python-pip
- sudo pip install docker-compose httpie
- nvm install 9
- npm i -g yarn
- source <(curl -fsSL https://raw.github.com/daggerok/bash-functions/master/main.bash)
- stop_any 5432 5672 27017

script:
- export root=$(pwd)

# github-api-v3-gateway
- bash gradlew -b ${root}/github-api-v3-gateway/build.gradle >/dev/null 2>&1
- bash gradlew -b ${root}/github-api-v3-gateway/build.gradle :w-g:composeUp
- http :8080/github
- http :8080/
- bash gradlew -b ${root}/github-api-v3-gateway/build.gradle :w-g:composeDown
#
- bash ${root}/github-api-v3-gateway/webflux-gateway/build/libs/*.jar &
- wait_for 8080
- http :8080/github
- http :8080/
- stop_any 8080
#
- bash mvnw -f ${root}/github-api-v3-gateway/pom.xml >/dev/null 2>&1
- bash mvnw -f ${root}/github-api-v3-gateway/pom.xml -pl webflux-gateway clean package com.dkanejs.maven.plugins:docker-compose-maven-plugin:1.0.1:up
- sleep 15
- http :8080/github
- http :8080/
- bash mvnw -f ${root}/github-api-v3-gateway/pom.xml -pl webflux-gateway com.dkanejs.maven.plugins:docker-compose-maven-plugin:1.0.1:down
#
- bash mvnw -f ${root}/github-api-v3-gateway/pom.xml >/dev/null 2>&1
- bash ${root}/github-api-v3-gateway/webflux-gateway/target/*.jar &
- wait_for 8080
- http :8080/github
- http :8080/
- stop_any 8080
#
- http -a "$GITHUB_AUTHORIZATION" https://api.github.com
- curl -u "$GITHUB_AUTHORIZATION" https://api.github.com

# reactor-processors
- bash gradlew -b ${root}/reactor-processors/build.gradle >/dev/null 2>&1
- bash mvnw -f ${root}/reactor-processors/pom.xml >/dev/null 2>&1
- bash ${root}/reactor-processors/flux-sink/build/libs/*.jar &
- wait_for 8080
- curl http://127.0.0.1:8080 &
- http :8080 --stream &
- http :8080/message message=hi!
- http :8080/message message=hey!
- stop_any 8080

# reactive axon
- bash gradlew -b ${root}/axon-lock/build.gradle >/dev/null 2>&1
- bash mvnw -f ${root}/axon-lock/pom.xml >/dev/null 2>&1
- java -jar ${root}/axon-lock/axon-app/build/libs/*.jar &
- java -jar ${root}/axon-lock/axon-app/target/*.jar --server.port=8000 &
- wait_for 8080 8000
- http :8080 name=Max
- http :8000 name=Axon
- stop_any 8080 8000

## kotlin-beans-dsl
#- bash gradlew -b ${root}/kotlin-beans-dsl/build.gradle >/dev/null 2>&1
#- java -jar ${root}/kotlin-beans-dsl/kotlin-config-dsl/build/libs/*.jar
#- bash mvnw -f ${root}/kotlin-beans-dsl/pom.xml >/dev/null 2>&1
#- java -jar ${root}/kotlin-beans-dsl/kotlin-config-dsl/target/*.jar

## xml-wtf
#- bash gradlew -b ${root}/xml-wtf/build.gradle >/dev/null 2>&1
#- java -jar ${root}/xml-wtf/kotlin-xml/build/libs/*.jar &
#- bash mvnw -f ${root}/xml-wtf/pom.xml >/dev/null 2>&1
#- java -jar ${root}/xml-wtf/kotlin-xml/target/*.jar --server.port=8000 &
#- wait_for 8080 8000
#- http :8080
#- http :8000
#- stop_any 8080 8000
## maven docker
#- docker-compose -f ${root}/xml-wtf/docker-compose-maven.yaml build --force-rm --no-cache --pull
#- docker-compose -f ${root}/xml-wtf/docker-compose-maven.yaml up --force-recreate --remove-orphans &
#- sleep 20
#- http :8080
#- docker-compose -f ${root}/xml-wtf/docker-compose-maven.yaml down -v
## gradle docker
#- docker-compose -f ${root}/xml-wtf/docker-compose-gradle.yaml build --force-rm --no-cache --pull
#- docker-compose -f ${root}/xml-wtf/docker-compose-gradle.yaml up --force-recreate --remove-orphans &
#- sleep 20
#- http :8080
#- docker-compose -f ${root}/xml-wtf/docker-compose-gradle.yaml down -v

# monolith
- bash gradlew -b ${root}/monolith/build.gradle >/dev/null 2>&1
- java -jar ${root}/monolith/app/build/libs/*.jar &
- bash mvnw -f ${root}/monolith/pom.xml >/dev/null 2>&1
- java -jar ${root}/monolith/app/target/*.jar --server.port=8000 &
- wait_for 8080 8000
- http :8080
- http --stream :8080/api/v1/messages
- http :8000
- http --stream :8000/api/v1/messages 'accept:application/stream+json'
- stop_any 8080 8000

## listener-of-listener
#- bash gradlew -b ${root}/listener-of-listener/build.gradle >/dev/null 2>&1
#- java -jar ${root}/listener-of-listener/kotlin-listeners/build/libs/*.jar &
#- bash mvnw -f ${root}/listener-of-listener/pom.xml >/dev/null 2>&1
#- java -jar ${root}/listener-of-listener/kotlin-listeners/target/*.jar --server.port=8000 &
#- wait_for 8080 8000
#- http :8080
#- http :8080 message=send\ message,\ y0!
#- stop_any 8080 8000
## maven docker
#- docker-compose -f ${root}/listener-of-listener/docker-compose-maven.yaml build --force-rm --no-cache --pull
#- docker-compose -f ${root}/listener-of-listener/docker-compose-maven.yaml up --force-recreate --remove-orphans &
#- sleep 20
#- http :8080
#- http :8080 message=send\ message,\ y0!
#- docker-compose -f ${root}/listener-of-listener/docker-compose-maven.yaml down -v
## gradle docker
#- docker-compose -f ${root}/listener-of-listener/docker-compose-gradle.yaml build --force-rm --no-cache --pull
#- docker-compose -f ${root}/listener-of-listener/docker-compose-gradle.yaml up --force-recreate --remove-orphans &
#- sleep 20
#- http :8080
#- http :8080 message=send\ message,\ y0!
#- docker-compose -f ${root}/listener-of-listener/docker-compose-gradle.yaml down -v

# thymeleaf-webflux
- bash gradlew -b ${root}/thymeleaf-webflux/build.gradle >/dev/null 2>&1
- java -jar ${root}/thymeleaf-webflux/reactive-thymeleaf/build/libs/*.jar &
- bash mvnw -f ${root}/thymeleaf-webflux/pom.xml >/dev/null 2>&1
- java -jar ${root}/thymeleaf-webflux/reactive-thymeleaf/target/*.jar --server.port=8000 &
- wait_for 8080 8000
- http --stream :8080
- http --stream :8000
- stop_any 8080 8000
# maven docker
- docker-compose -f ${root}/thymeleaf-webflux/docker-compose-maven.yaml build --force-rm --no-cache --pull
- docker-compose -f ${root}/thymeleaf-webflux/docker-compose-maven.yaml up --force-recreate --remove-orphans &
- sleep 20
- http --stream :8080
- docker-compose -f ${root}/thymeleaf-webflux/docker-compose-maven.yaml down -v
# gradle docker
- docker-compose -f ${root}/thymeleaf-webflux/docker-compose-gradle.yaml build --force-rm --no-cache --pull
- docker-compose -f ${root}/thymeleaf-webflux/docker-compose-gradle.yaml up --force-recreate --remove-orphans &
- sleep 20
- http --stream :8080
- docker-compose -f ${root}/thymeleaf-webflux/docker-compose-gradle.yaml down -v

## rmi
#- bash gradlew -b ${root}/rmi/build.gradle >/dev/null 2>&1
#- java -jar ${root}/rmi/spring-rmi-client/build/libs/*.jar &
#- bash mvnw -f ${root}/rmi/pom.xml >/dev/null 2>&1
#- java -jar ${root}/rmi/spring-rmi-service/target/*.jar --server.port=8000 &
#- wait_for 8080 8000
#- http :8080/api/v1/users name=maksimko
#- http :8080/api/v1/users name=maks
#- http :8080/api/v1/users name=max
#- http :8080/api/v1/users
#- stop_any 8080 8000
## hotel maven docker
#- docker-compose -f ${root}/rmi/docker-compose.yaml build --force-rm --no-cache --pull
#- docker-compose -f ${root}/rmi/docker-compose.yaml up --force-recreate --remove-orphans &
#- sleep 20
#- http :8080/api/v1/users name=maksimko
#- http :8080/api/v1/users name=maks
#- http :8080/api/v1/users name=max
#- http :8080/api/v1/users
#- docker-compose -f ${root}/rmi/docker-compose.yaml down -v

## mailbox
#- bash gradlew clean build -b ${root}/mailbox/build.gradle >/dev/null 2>&1
#- bash mvnw clean package -f ${root}/mailbox/pom.xml >/dev/null 2>&1
#- java -jar ${root}/mailbox/webapp/target/*.jar &
#- wait_for 8080
#- http -a max:max get :8080/
#- stop_any 8080

## hotel gradle
#- bash gradlew clean build -b ${root}/hotel/build.gradle >/dev/null 2>&1
#- java -jar ${root}/hotel/webapp/build/libs/*.jar &
#- docker-compose -f ${root}/hotel/reservations/docker-compose.yml up -d
#- java -jar ${root}/hotel/reservations/build/libs/*.jar &
#- wait_for 8080 8081
#- http :8081/api/v1/reservations
#- http :8080
#- http :8080?name=Gradle
#- http :8080/actuator/
#- http :8080/actuator/health
#- stop_any 8080 8081
## hotel maven docker
#- bash mvnw -f ${root}/hotel/pom.xml clean package -U >/dev/null 2>&1
#- docker-compose -f ${root}/hotel/docker-compose.yaml build --force-rm --no-cache --pull
#- docker-compose -f ${root}/hotel/docker-compose.yaml up --force-recreate --remove-orphans &
#- sleep 20
#- http :8080
#- http :8080?name=Maven
#- http :8080/actuator/
#- http :8080/actuator/health
#- docker-compose -f ${root}/hotel/docker-compose.yaml down -v

## mustache-json gradle
#- bash gradlew build -b ${root}/mustache-json/build.gradle >/dev/null 2>&1
#- java -jar ${root}/mustache-json/build/libs/*.jar &
#- sleep 10
#- http :8080
#- http :8080/hello/
#- http :8080/hello/mustache
#- stop_any 8080
#- bash ./gradlew clean build
## mustache-json docker
#- docker-compose -f ${root}/mustache-json/docker-compose.yaml build --force-rm --no-cache --pull
#- docker-compose -f ${root}/mustache-json/docker-compose.yaml up --force-recreate --remove-orphans &
#- sleep 20
#- http :8080
#- http :8080/hello
#- http :8080/hello/lol
#- docker-compose -f ${root}/mustache-json/docker-compose.yaml down -v

# reactive-ngrx gradle
- bash mvnw -f ${root}/reactive-ngrx/pom.xml
- java -jar ${root}/reactive-ngrx/target/*.jar &
- sleep 25
- http :8080
- stop_any 8080
- bash gradlew -b ${root}/reactive-ngrx/build.gradle
# reactive-ngrx docker
- docker-compose -f ${root}/reactive-ngrx/src/main/docker/docker-compose.yaml up --build -d
- sleep 30
- http :8001
- http :8002
- docker-compose -f ${root}/reactive-ngrx/src/main/docker/docker-compose.yaml down -v

#- >
#  for path in \
#    spring-shell \
#    reactive-websocket-sse \
#    spring-boot-under-the-hood \
#    reactive-auth \
#    reactive-security-client \
#    reactive-functional-security \
#    reactive-mongo-webflux-functional \
#    reactive-mongo-webflux \
#    reactive-webflux-spring-data-redis \
#    spring-integration-5-example \
#    functional-spring;
#  do
#    export project="${root}/$path"
#    cd ${project}
#    echo "build $path"
#    bash gradlew clean build >/dev/null 2>&1
#  done;
