sudo: required
group: travis_lts

env:
  global:
    TERM=dumb

language: java
jdk:
  - openjdk8
  - oraclejdk8

install: true
before_install:

  # install docker / compose
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  - sudo apt update
  - sudo apt -y install docker-ce python-pip curl jq libxml2-utils
  - sudo pip install docker-compose httpie
  - sudo usermod -aG docker $(whoami)

  # helper bash functions
  - source <(curl -s https://raw.githubusercontent.com/daggerok/bash-functions/master/src/stop_any.bash)
  - source <(curl -s https://raw.githubusercontent.com/daggerok/bash-functions/master/src/wait_for.bash)

  # kill whatever punning on postgres / rabbitmq port
  - stop_any 5432 5672 27017

script:

  - export ROOT=$PWD

  - bash gradlew build -b $ROOT/mustache-json/build.gradle
  - java -jar $ROOT/mustache-json/build/libs/*.jar &
  - sleep 10
  - http :8080
  - http :8080/hello/
  - http :8080/hello/mustache
  - stop_any 8080
  - bash ./gradlew clean build
  - docker-compose -f $ROOT/mustache-json/docker-compose.yaml build --force-rm --no-cache --pull
  - docker-compose -f $ROOT/mustache-json/docker-compose.yaml up --force-recreate --remove-orphans &
  - sleep 20
  - http :8080
  - http :8080/hello
  - http :8080/hello/lol
  - docker-compose -f $ROOT/mustache-json/docker-compose.yaml down -v

  - bash mvnw clean package -f $ROOT/reactive-ngrx/pom.xml
  - java -jar $ROOT/reactive-ngrx/target/*.jar &
  - sleep 15
  - http :8080
  - stop_any 8080
  - bash gradlew clean build -b $ROOT/reactive-ngrx/build.gradle
  - docker-compose -f $ROOT/reactive-ngrx/src/main/docker/docker-compose.yaml up --build -d
  - sleep 20
  - http :8001
  - http :8002
  - docker-compose -f $ROOT/reactive-ngrx/src/main/docker/docker-compose.yaml down -v

  - >
    for path in \
      reactive-ngrx \
      mustache-json \
      spring-shell \
      reactive-websocket-sse \
      spring-boot-under-the-hood \
      reactive-auth \
      reactive-security-client \
      reactive-functional-security \
      reactive-mongo-webflux-functional \
      reactive-mongo-webflux \
      reactive-webflux-spring-data-redis \
      spring-integration-5-example \
      functional-spring;
    do
      export TARGET="$ROOT/$path"
      cd $TARGET
      echo "build $path"
      bash gradlew clean build
    done;

before_cache:
  - bash gradlew --stop
  - rm -rf $HOME/.gradle/caches/modules-2/modules-2.lock
  - rm -rf $HOME/.gradle/caches/*/plugin-resolution/

cache:
  directories:
    - $HOME/.m2/
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/
