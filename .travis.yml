sudo: required
group: travis_lts

service:
- docker

env:
  global:
    TERM=dumb

language: java
jdk:
- openjdk8
- oraclejdk8

install: true
before_install:

#- curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
#- sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
#- sudo apt install -y docker-ce
#- sudo usermod -aG docker $(whoami)

#- curl -fsSL get.docker.com | sudo sh -
#- wget get.docker.com -O- | sudo sh -

# install docker-compose, HTTPie, etc...
- sudo apt update -y || true
- sudo apt install -y --no-install-recommends docker-ce curl jq libxml2-utils python-pip
- sudo pip install docker-compose httpie

- nvm install 9
- npm i -g yarn

# helper bash functions (wait_for, stop_any)
- source <(curl -fsSL https://raw.github.com/daggerok/bash-functions/master/main.bash)
- stop_any 5432 5672 27017

script:

- export root=$(pwd)

# kotlin-beans-dsl
- bash gradlew -b ${root}/kotlin-beans-dsl/build.gradle
- java -jar ${root}/kotlin-beans-dsl/kotlin-config-dsl/build/libs/*.jar
- bash mvnw -f ${root}/kotlin-beans-dsl/pom.xml
- java -jar ${root}/kotlin-beans-dsl/kotlin-config-dsl/target/*.jar

# xml-wtf
- bash gradlew -b ${root}/xml-wtf/build.gradle
- java -jar ${root}/xml-wtf/kotlin-xml/build/libs/*.jar &
- bash mvnw -f ${root}/xml-wtf/pom.xml
- java -jar ${root}/xml-wtf/kotlin-xml/target/*.jar --server.port=8000 &
- wait_for 8080 8000
- http :8080
- http :8000
- stop_any 8080 8000
# maven docker
- docker-compose -f ${root}/xml-wtf/docker-compose-maven.yaml build --force-rm --no-cache --pull
- docker-compose -f ${root}/xml-wtf/docker-compose-maven.yaml up --force-recreate --remove-orphans &
- sleep 20
- http :8080
- docker-compose -f ${root}/xml-wtf/docker-compose-maven.yaml down -v
# gradle docker
- docker-compose -f ${root}/xml-wtf/docker-compose-gradle.yaml build --force-rm --no-cache --pull
- docker-compose -f ${root}/xml-wtf/docker-compose-gradle.yaml up --force-recreate --remove-orphans &
- sleep 20
- http :8080
- docker-compose -f ${root}/xml-wtf/docker-compose-gradle.yaml down -v

# monolith
- bash gradlew -b ${root}/monolith/build.gradle
- java -jar ${root}/monolith/app/build/libs/*.jar &
- bash mvnw -f ${root}/monolith/pom.xml
- java -jar ${root}/monolith/app/target/*.jar --server.port=8000 &
- wait_for 8080 8000
- http :8080
- http --stream :8080/api/v1/messages
- http :8000
- http --stream :8000/api/v1/messages 'accept:application/stream+json'
- stop_any 8080 8000

## listener-of-listener
#- bash gradlew -b ${root}/listener-of-listener/build.gradle
#- java -jar ${root}/listener-of-listener/kotlin-listeners/build/libs/*.jar &
#- bash mvnw -f ${root}/listener-of-listener/pom.xml
#- java -jar ${root}/listener-of-listener/kotlin-listeners/target/*.jar --server.port=8000 &
#- wait_for 8080 8000
#- http :8080
#- http :8080 message=send\ message,\ y0!
#- stop_any 8080 8000
## maven docker
#- docker-compose -f ${root}/listener-of-listener/docker-compose-maven.yaml build --force-rm --no-cache --pull
#- docker-compose -f ${root}/listener-of-listener/docker-compose-maven.yaml up --force-recreate --remove-orphans &
#- sleep 20
#- http :8080
#- http :8080 message=send\ message,\ y0!
#- docker-compose -f ${root}/listener-of-listener/docker-compose-maven.yaml down -v
## gradle docker
#- docker-compose -f ${root}/listener-of-listener/docker-compose-gradle.yaml build --force-rm --no-cache --pull
#- docker-compose -f ${root}/listener-of-listener/docker-compose-gradle.yaml up --force-recreate --remove-orphans &
#- sleep 20
#- http :8080
#- http :8080 message=send\ message,\ y0!
#- docker-compose -f ${root}/listener-of-listener/docker-compose-gradle.yaml down -v

# thymeleaf-webflux
- bash gradlew -b ${root}/thymeleaf-webflux/build.gradle
- java -jar ${root}/thymeleaf-webflux/reactive-thymeleaf/build/libs/*.jar &
- bash mvnw -f ${root}/thymeleaf-webflux/pom.xml
- java -jar ${root}/thymeleaf-webflux/reactive-thymeleaf/target/*.jar --server.port=8000 &
- wait_for 8080 8000
- http --stream :8080
- http --stream :8000
- stop_any 8080 8000
# maven docker
- docker-compose -f ${root}/thymeleaf-webflux/docker-compose-maven.yaml build --force-rm --no-cache --pull
- docker-compose -f ${root}/thymeleaf-webflux/docker-compose-maven.yaml up --force-recreate --remove-orphans &
- sleep 20
- http --stream :8080
- docker-compose -f ${root}/thymeleaf-webflux/docker-compose-maven.yaml down -v
# gradle docker
- docker-compose -f ${root}/thymeleaf-webflux/docker-compose-gradle.yaml build --force-rm --no-cache --pull
- docker-compose -f ${root}/thymeleaf-webflux/docker-compose-gradle.yaml up --force-recreate --remove-orphans &
- sleep 20
- http --stream :8080
- docker-compose -f ${root}/thymeleaf-webflux/docker-compose-gradle.yaml down -v

## rmi
#- bash gradlew -b ${root}/rmi/build.gradle
#- java -jar ${root}/rmi/spring-rmi-client/build/libs/*.jar &
#- bash mvnw -f ${root}/rmi/pom.xml
#- java -jar ${root}/rmi/spring-rmi-service/target/*.jar --server.port=8000 &
#- wait_for 8080 8000
#- http :8080/api/v1/users name=maksimko
#- http :8080/api/v1/users name=maks
#- http :8080/api/v1/users name=max
#- http :8080/api/v1/users
#- stop_any 8080 8000
## hotel maven docker
#- docker-compose -f ${root}/rmi/docker-compose.yaml build --force-rm --no-cache --pull
#- docker-compose -f ${root}/rmi/docker-compose.yaml up --force-recreate --remove-orphans &
#- sleep 20
#- http :8080/api/v1/users name=maksimko
#- http :8080/api/v1/users name=maks
#- http :8080/api/v1/users name=max
#- http :8080/api/v1/users
#- docker-compose -f ${root}/rmi/docker-compose.yaml down -v

## mailbox
#- bash gradlew clean build -b ${root}/mailbox/build.gradle
#- bash mvnw clean package -f ${root}/mailbox/pom.xml
#- java -jar ${root}/mailbox/webapp/target/*.jar &
#- wait_for 8080
#- http -a max:max get :8080/
#- stop_any 8080

## hotel gradle
#- bash gradlew clean build -b ${root}/hotel/build.gradle
#- java -jar ${root}/hotel/webapp/build/libs/*.jar &
#- docker-compose -f ${root}/hotel/reservations/docker-compose.yml up -d
#- java -jar ${root}/hotel/reservations/build/libs/*.jar &
#- wait_for 8080 8081
#- http :8081/api/v1/reservations
#- http :8080
#- http :8080?name=Gradle
#- http :8080/actuator/
#- http :8080/actuator/health
#- stop_any 8080 8081
## hotel maven docker
#- bash mvnw -f ./hotel/pom.xml clean package -U
#- docker-compose -f ${root}/hotel/docker-compose.yaml build --force-rm --no-cache --pull
#- docker-compose -f ${root}/hotel/docker-compose.yaml up --force-recreate --remove-orphans &
#- sleep 20
#- http :8080
#- http :8080?name=Maven
#- http :8080/actuator/
#- http :8080/actuator/health
#- docker-compose -f ${root}/hotel/docker-compose.yaml down -v

# mustache-json gradle
- bash gradlew build -b ${root}/mustache-json/build.gradle
- java -jar ${root}/mustache-json/build/libs/*.jar &
- sleep 10
- http :8080
- http :8080/hello/
- http :8080/hello/mustache
- stop_any 8080
- bash ./gradlew clean build
# mustache-json docker
- docker-compose -f ${root}/mustache-json/docker-compose.yaml build --force-rm --no-cache --pull
- docker-compose -f ${root}/mustache-json/docker-compose.yaml up --force-recreate --remove-orphans &
- sleep 20
- http :8080
- http :8080/hello
- http :8080/hello/lol
- docker-compose -f ${root}/mustache-json/docker-compose.yaml down -v

# reactive-ngrx gradle
- bash mvnw -f ${root}/reactive-ngrx/pom.xml
- java -jar ${root}/reactive-ngrx/target/*.jar &
- sleep 25
- http :8080
- stop_any 8080
- bash gradlew -b ${root}/reactive-ngrx/build.gradle
# reactive-ngrx docker
- docker-compose -f ${root}/reactive-ngrx/src/main/docker/docker-compose.yaml up --build -d
- sleep 30
- http :8001
- http :8002
- docker-compose -f ${root}/reactive-ngrx/src/main/docker/docker-compose.yaml down -v

- >
  for path in \
    spring-shell \
    reactive-websocket-sse \
    spring-boot-under-the-hood \
    reactive-auth \
    reactive-security-client \
    reactive-functional-security \
    reactive-mongo-webflux-functional \
    reactive-mongo-webflux \
    reactive-webflux-spring-data-redis \
    spring-integration-5-example \
    functional-spring;
  do
    export project="${root}/$path"
    cd ${project}
    echo "build $path"
    bash gradlew clean build
  done;

cache:
  directories:
  - $HOME/.m2/
  - $HOME/.gradle/
